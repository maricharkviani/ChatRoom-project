ChatRoom
პროექტის მიზანია ააწყოთ chat room ტიპის პროგრამა, რომელიც შედგება ორი ნაწილისაგან, სერვერისა და კლიენტისგან. უნდა დაწეროთ ორი მთავარი კლასი:

ChatRoom - სადაც იქნება სერვერი, რომელიც მუდმივად შეძლებს მიიღოს შემავალი კავშირები და ჩააგდოს ყველა ამგვარად მიღებული კლიენტი ჩათში

ChatUser - მომხმარებლის კლასი, რომელიც მიიღებს მისამართს და შეეცდება ამ მისამართზე სერვერთან დაკავშირებას


ChatRoom-ის იმპლემენტაცია:
main მეთოდის გამოძახების შემდგომ, კონსოლში ინპუტად უნდა მიიღოს პორტი, რომელზეც გაიშვება სერვერი. ამის შემდეგ, უნდა მიიღოთ მომავალი სოკეტის კავშირეები accept()-ით და მიღებული ყოველი კავშირისათვის გამოყოთ ნაკადები, რომლებიც მოახდენენ ამ კლიენტთან კომუნიკაციის უზრუნველყოფას. ყველა კლიენტის, რომელიც დაკავშირდება, უნდა შეეძლოს სხვა დაკავშირებულ კლიენტებთან ერთად ჩათში საუბარი. ასევე კლიენტებს უნდა შეეძლოთ ერთმანეთთან პირადი მესიჯების გაგზავნაც, ისე რომ ეს მესიჯები არ იყოს ხილული სხვა ჩათის წევრებისათვის. თავდაპირველად ყველა კლიენტი ჩათში დაწერს ანონიმურად, ხოლო სპეციალური მესიჯის გამოგზავნის შემთხვევაში, მათ უნდა ქონდეთ საშუალება დაიწერონ/შეიცვალონ სახელი, რომელიც გამოჩნდება ჩათში. ასევე სპეციალური მესიჯის საშუალებით უნდა მოხდეს კლიენტის ჩათიდან გასვლა. აგრეთვე, მომხმარებლის დაკავშირების ან გასვლის შემთხვევაში უნდა ვაცნობოთ ყველა ჩათში მყოფს და ასევე ვაჩვენოთ რამდენი წევრია შესული.

პროგრამის მახასიათებლები:

* პორტის მიღება კონსოლიდან

* accept()-ით მიღება კავშირების

* მიღებისას ახალი კლიენტისთვის welcome მესიჯის გაგზავნა

* მიღებისას სხვა კლიენტებისთვის ნოტიფიკაციის ტიპის მესიჯის გაგზავნა 

* სახელის შეცვლის შესაძლებლობა

* პირადი მესიჯის გაგზავნის შესაძლებლობა



ChatUser-ის იმპლემენტაცია:
main მეთოდის გამოძახების შემდგომ, კონსოლში ინპუტად უნდა მიიღოს მისამართი და პორტი, რომლის მიხედვითაც შეეცდება კავშირის დამყარებას. თუ დაკავშირება ვერ მოხერხდა, უნდა მიიღოს ახალი მისამართი და პორტი და სცადოს ხელახლა, რაც უნდა გაგრძელდეს მანამ, სანამ კავშირი არ დამყარდება. ასევე უნდა მოხდეს თავიდან დაკავშირება იმ შემთხვევაში, თუ რაიმე გაურკვეველი მიზეზით გაწყდა სერვერთან კავშირი. დაკავშირების შემდეგ, კლიენტმა უნდა მიიღოს სერვერისგან ჩათში დამატების სპეციალური მესიჯი და გამოიტანოს კონსოლზე (მაგალითად: WELCOME TO CHAT), რომლის შემდეგაც შეძლებს მესიჯების გაგზავნას. კლიენტს უნდა შეეძლოს გაგზავნოს მესიჯები ჩათში ან გაუგზავნოს პირადი მესიჯი სხვა მომხმარებელს. კლეინტს ასევე უნდა შეეძლოს სახელის შეცვლა ან ჩათის დატოვება სპეციალური მესიჯის გაგზავნით სერვერთან, რომელიც არ უნდა იყოს ხილული სხვა ჩათის წევრებისათვის.

პროგრამის მახასიათებლები:

* მისამართისა და პორტის მიღება კონსოლიდან

* თავიდან დაკავშირების შესაძლებლობა

* ჩათში მესიჯის გაგზავნა

* სპეციალური მესიჯებით სარგებლობა



რჩევები:
* შეგიძლიათ გამოიყენოთ უკეთესი კომუნიკაციისათვის ObjectInputStream/ObjectOutputStream და სხვადასხვა ტიპის მესიჯების მიმოცვლით აწარმოოთ კომუნიკაცია. ამაში დაგეხმარებათ Serializable ინტერფეისი. 

* დაგჭირდებათ ნაკადების გამოყენება, რისთვისაც დაგეხმარებათ Runnable ტასკების შექმნა, რომელიც შემდეგ შეგიძლიათ გამოიყენოთ მრავალი ნაკადის შექმნისას.

* შეგიძლიათ მიღებული კლიენტები განათავსოთ რაიმე ნაკადების წვდომისათვის უსაფრთხო (thread safe) სტრუქტურაში, მაგალითად ConcurrentHashMap

* ყურადღება მიაქციეთ სინქრონიზაციის სწორად გამოყენებას!

* შეგიძლიათ განავრცოთ თქვენი პროექტი სხვადასხვა ფუნქციონალით, არ ხართ იმპლემენტაციის დეტალებში შეზღუდული, იყავით კრეატიულები